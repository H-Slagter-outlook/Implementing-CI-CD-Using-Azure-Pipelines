parameters:
- name: envName
  type: string
  default: 'test'
- name: awsConnection
  type: string
  default: 'aws-packt'
- name: location
  type: string
  default: 'us-east-1'
- name: containerTag
  type: string
  default: 'latest'
  # default: '$(Build.BuildNumber)'

jobs:
- deployment: deployment_${{ parameters.envName }} 
  displayName: Deploy to ${{ parameters.envName }}
  environment: ${{ parameters.envName }}
  strategy: 
    runOnce:
      deploy:
        steps:
        - download: current
          displayName: 'Download cart iac'
          artifact: cart-iac
        - task: CloudFormationCreateOrUpdateStack@1
          displayName: 'Create cart stack'
          inputs:
            awsCredentials: ${{ parameters.awsConnection }}
            regionName: ${{ parameters.location }}
            stackName: '${{ parameters.envName }}-cart'
            templateSource: 'file'
            templateFile: '$(Pipeline.Workspace)/cart-iac/template.json'
            templateParametersSource: 'inline'
            templateParameters: '[{"ParameterKey":"ContainerTag","ParameterValue":"${{ parameters.containerTag }}"}]'
            onFailure: 'DELETE'
            captureStackOutputs: 'asVariables'
            captureAsSecuredVars: false
        - download: current
          displayName: 'Download checkout iac'
          artifact: checkout-iac
        - task: CloudFormationCreateOrUpdateStack@1
          displayName: 'Create checkout stack'
          inputs:
            awsCredentials: ${{ parameters.awsConnection }}
            regionName: ${{ parameters.location }}
            stackName: '${{ parameters.envName }}-checkout'
            templateSource: 'file'
            templateFile: '$(Pipeline.Workspace)/checkout-iac/template.json'
            templateParametersSource: 'inline'
            templateParameters: '[{"ParameterKey":"ContainerTag","ParameterValue":"${{ parameters.containerTag }}"}]'
            onFailure: 'DELETE'
            captureStackOutputs: 'asVariables'
            captureAsSecuredVars: false
        - download: current
          displayName: 'Download frontend iac'
          artifact: frontend-iac
        # - task: AWSShellScript@1
        #   displayName: 'Set App URLs'
        #   inputs:
        #     awsCredentials: ${{ parameters.awsConnection }}
        #     regionName: ${{ parameters.location }}
        #     scriptType: 'inline'
        #     failOnStandardError: true
        #     inlineScript: |
        #       # Set the checkout app url
        #       var=`aws ecs list-tasks --cluster ${{ parameters.envName }}-checkout --service-name checkout --query x --output text`
        #       value="http://" + $var.containerFQDN.value + ":5015/"
        #       echo "Checkout App Url: $value"
        #       echo "##vso[task.setvariable variable=checkoutAppUrl;]$value"
        - task: CloudFormationCreateOrUpdateStack@1
          displayName: 'Create frontend stack'
          inputs:
            awsCredentials: ${{ parameters.awsConnection }}
            regionName: ${{ parameters.location }}
            stackName: '${{ parameters.envName }}-frontend'
            templateSource: 'file'
            templateFile: '$(Pipeline.Workspace)/frontend-iac/template.json'
            templateParametersSource: 'inline'
            templateParameters: '[{"ParameterKey":"EnvironmentName","ParameterValue":"${{ parameters.envName }}"}]'
            onFailure: 'DELETE'
        - task: AWSShellScript@1
          displayName: 'Deploy frontend container'
          inputs:
            awsCredentials: ${{ parameters.awsConnection }}
            regionName: ${{ parameters.location }}
            arguments: '${{ parameters.envName }}-frontend ${{ parameters.location }} packt-store-frontend ${{ parameters.containerTag }} http://catalog:5050/ $(CartUrl) $(CheckoutUrl)'
            disableAutoCwd: true
            workingDirectory: '$(Pipeline.Workspace)/frontend-iac'
            failOnStandardError: true
            scriptType: 'inline'
            inlineScript: |
              # Confirm Parameters
              echo "SERVICE_NAME: $1"
              echo "AWS_REGION: $2"
              echo "REPO_NAME: $3"
              echo "CONTAINER_TAG: $4"
              echo "CATALOG_API_URL_VALUE: $5"
              echo "CART_API_URL_VALUE: $6"
              echo "CHECKOUT_API_URL_VALUE: $7"
              aws lightsail update-container-service --service-name $1 --region $2 --private-registry-access file://private-registry-access.json 
              echo "Waiting for container service to be ready..."
              principal_arn=""
              until [ "$principal_arn" != "" ]
              do
                  sleep 5
                  principal_arn=`aws lightsail get-container-services --service-name $1 --region $2 --query "containerServices[0].privateRegistryAccess.ecrImagePullerRole.principalArn" --output text`
              done
              echo "Principal ARN: $principal_arn"
              # Aply ECR policy
              echo "Applying ECR policy..."
              sed "s|IamRolePrincipalArn|$principal_arn|g" ecr-policy-template.json > ecr-policy.json
              aws ecr set-repository-policy --repository-name $3 --policy-text file://ecr-policy.json
              # Create Deployment
              account_id=`aws sts get-caller-identity --query "Account" --output text`
              sed "s|AWSACCOUNTID|$account_id|g ; s|AWSREGION|$2|g ; s|REPO_NAME|$3|g ; s|CONTAINERTAG|$4|g ; s|CATALOG_API_URL_VALUE|$5|g ; s|CART_API_URL_VALUE|$6|g ; s|CHECKOUT_API_URL_VALUE|$7|g" deployment-template.json > deployment.json
              echo "Creating deployment..."
              aws lightsail create-container-service-deployment --service-name $1 --region $2 --cli-input-json file://deployment.json
              state="DEPLOYING"
              until [ "$state" != "DEPLOYING" ]
              do
                  sleep 5
                  state=`aws lightsail get-container-services --service-name $1 --region $2 --query "containerServices[0].state" --output text`
              done
              if [ "$state" == "RUNNING" ]
              then
                  echo "Deployment created successfully!"
              else
                  echo "Deployment failed!"
                  exit 1
              fi
